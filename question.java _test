package com.liz.thedemofinal.thedemofinal;

//import is #include from C++

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

//Extends = inherits, implements means it interfaces with another class
public class Question extends Activity implements OnClickListener
{
    //Declaring and setting string variables
    private static final String TAG_DEBUG = Question.class.getName();
    public static final String TAG_YES = "yes";
    public static final String TAG_NO = "no";
    public static final String TAG_P1 = "p1";
    public static final String TAG_P2 = "p2";
   // public static final java.lang.String TAG_PLACE = ;

    //Creating the EditText object
    private EditText et;

    //Creating button objects, which extend (inherit) the View class
    //private Button buttonquest;
    private Button buttonyes;
    private Button buttonno;


    @Override
	/*An onCreate method/function is what is called when a screen is first showed.
	  In this case, this is the main menu screen.
	*/
    protected void onCreate(Bundle savedInstanceState)
    {
        //The super keyword is used to refer to the parent class in java
        super.onCreate(savedInstanceState);

        //How the activity actually looks is inside main.xml, inside the layout folder
        setContentView(R.layout.question);

        // The edit text has a string value set by the editText1 ID in Main.xml
        //et = (EditText) findViewById(R.id.editText1);

        //The buttons have parameters corresponding to the IDs in Main.xml
        buttonyes = (Button) findViewById(R.id.yescount);
        buttonno = (Button) findViewById(R.id.nocount);
        //buttonquest = (Button) findViewById(R.id.questions);

		/*The buttons now have onClickListeners set, a method/function of the button class
		 * to start a new activity/intent when pressed. In this case, pressing a button
		 * will go to the results page.
		 * */
        buttonyes.setOnClickListener(this);
        buttonno.setOnClickListener(this);
        //buttonquest.setOnClickListener(this);
    }
    static double run = 1;
    int counter = 0;
    static double yescounter = 0;
    static double nocounter = 0;
    static double  totalyes1, totalyes2,totalyes3, totalyes4;
    //double placement = 0;
    double[] placement;
    double percent1,percent2;
    double totalno;
   // placement = new double[20];

    @Override
    public void onClick(View v)
    {
        List<Double> list = new ArrayList<>();
        placement = new double[20];

       // placement[] array = new placement[list.size()];
        counter = counter + 1;

       // double total = yescounter + no;
       // double run = total / 4;
/*
        if (counter == 1) {
            TextView tv = (TextView) findViewById(R.id.question);
            tv.setText("baby?");

        }
        else if (counter == 2) {
            TextView tv = (TextView) findViewById(R.id.question);
            tv.setText("fuck yeah");
        }
        else if (counter == 3){
            TextView tv = (TextView) findViewById(R.id.question);
            tv.setText("I always work");
        }

*/

        switch (v.getId()) {
            case R.id.yescount: {
                yescounter = yescounter + 1;
                list.add( (double) 1);
                if (counter == 1) {
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("baby?");
                    totalyes1 += 1;
                    percent1 = (totalyes1/ run) * 100;



                }
                else if (counter == 2) {
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("fuck yeah");
                    totalyes2 += 1;
                    percent2 = (totalyes2/ run) * 100;
                }
                else if (counter == 3){
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("I always work");
                }

                break;
            }
            case R.id.nocount : {
                nocounter = nocounter + 1;
                //placement[counter - 1] = 0.0;
                list.add((double) 0);
                if (counter == 1) {
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("baby?");
                    totalno = run - totalyes1;
                    percent1 = (totalno / run) * 100;


                }
                else if (counter == 2) {
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("fuck yeah");
                    totalno = run - totalyes2;
                    percent2=(totalno/run)*100;
                }
                else if (counter == 3){
                    TextView tv = (TextView) findViewById(R.id.question);
                    tv.setText("I always work");

                }
                break;
            }
            default : {
                break;
            }
        }
        if (counter == 4){
            //double[] placement = new double[list.size()];
            //placement= list.toArray(placement);
            launchResultActivity(nocounter, yescounter, percent1,percent2);
            run +=1;
           // Foo[] array = list.toArray(new Foo[list.size()]);
            //list.toArray(placement[20]);
            //placement[] array = list.toArray(new placement[list.size()]);
        }
    }
    //@Override
	/*onClick is what is called when the buttons are pressed and they take in Views as arguments
	 * as buttons are children of the view class, buttons can polymorphically be passed in. The button
	 * that called the onClick is automatically fed in*/
/*    public void onClick(View v)
    {
        double tipPercent = 0.0d;

        //The switch statements grab the id values of the button pressed and calculates the tip accordingly
        switch(v.getId()){

            case R.id.yescount :
            {
               // tipPercent = 0.1d;
            }
            case R.id.nocount :
            {
                //tipPercent = 0.15d;

                break;
            }
        *//*    case R.id.tip20 :
            {
                tipPercent = 0.20d;

                break;
            }*//*
            default :
            {
                break;
            }
        }

        //Pulls the input from the EditText
        String text = et.getText().toString();

        //If the user tried to proceed without entering a value
        if(text.equals(""))
        {
            //Show a toast telling them they need to enter a value. Text is pulled from strings.xml
            Toast.makeText(Main.this, getResources().getString(R.string.error_et), Toast.LENGTH_LONG).show();
            //Breaks out of the onClick, as we do not want to launch a new Activity without entered values
            return;
        }

		*//*If all is good, launch a new activity that passes in the amount entered and tip percentage
		NOTE: Double.parseDouble(string) turns a string into a double. It is used to cast the user's input
		to a double and feed it into the new activity
		*//*

        launchResultActivity(Double.parseDouble(et.getText().toString()), tipPercent);
    }*/

    /* The launchResultActivity method is used to start a new activity from within an onClickListener
     * */
    private void launchResultActivity(double nocounter, double yescounter, double percent1, double percent2)
    {


        //double tip = total * tipPercent;
        //double grandTotal = total + tip;

		/*The intent class represents an action is used to "load" activities into a variable so they can be passed in and launched from
		 * the startActivity method. Basic intents take two arguments, the current class(.java) and the class(.java) that the app will move to
		 *  The line below initializes an Intent named resultActivity and passes in (Main.this,Result.class) much like the this-> pointer in C++,
		 *  the this keyword in java is used by classes to reference themselves*/
        Intent resultActivity = new Intent(Question.this, Result.class);

		/*Since this method is private, if we want the Result Activity/class to access it's members (the strings TAG_TIP and TAG_GRAND_TOTAL),
		 *we can "push" members from the Main Acivity/class to Result, much like how a friend function can "pull" private members from objects
		*/
        resultActivity.putExtra(TAG_YES, yescounter);
        resultActivity.putExtra(TAG_NO, nocounter);
        resultActivity.putExtra(TAG_P1, percent1);
        resultActivity.putExtra(TAG_P2, percent2);
        //resultActivity.putExtra(TAG_PLACE, placement);


        Log.d(TAG_DEBUG, "Tip: " + yescounter);
        Log.d(TAG_DEBUG, "Grand Total: " + nocounter);
        Log.d(TAG_P1,"p1" + percent1 );
        Log.d(TAG_P1,"p2" + percent2 );



        //Launches the new activity
        startActivity(resultActivity);

    }
}
